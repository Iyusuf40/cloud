# create networking components 
#
# Then autoscalingGroup
# Remember targetGroup
#

Parameters:
        EnvironmentName:
                Description: A name used to make tags unique
                Type: String

        InstanceType:
                Description: The type of ec2 machines to launch
                Type: String
                Default: t3.medium

        ImageId:
                Description: The imageId of the machines to launch
                Type: String
                Default: ami-0e8ad072b97e68af9

        StorageSize:
                Description: Size of disk
                Type: Number
                Default: 20

Resources:
        ProfileWithRolesForOurApp:
                Type: AWS::IAM::InstanceProfile
                Properties: 
                        Roles:
                                - Ref: UdacityS3ReadOnlyEC2

        UdacityS3ReadOnlyEC2:
                Type: AWS::IAM::Role
                Properties:
                        AssumeRolePolicyDocument:
                                Version: "2012-10-17"
                                Statement:
                                        - Effect: 'Allow'
                                          Principal:
                                                  Service:
                                                          - 'ec2.amazonaws.com'
                                          Action:
                                                  - 'sts:AssumeRole'
                        ManagedPolicyArns:
                                - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
                        RoleName: Mys3GetObj

        MyVpc:
                Type: AWS::EC2::VPC
                Properties:
                        CidrBlock: 10.0.0.0/16
                        EnableDnsHostnames: true
                        Tags:
                                - Key: Name
                                  Value: !Sub ${EnvironmentName} Vpc

        InternetGateway:
                Type: AWS::EC2::InternetGateway
                Properties:
                        Tags:
                                - Key: Name
                                  Value: !Sub ${EnvironmentName}-internet gateway

        InternetGatewayAttachment:
                Type: AWS::EC2::VPCGatewayAttachment
                Properties:
                        InternetGatewayId: !Ref InternetGateway
                        VpcId: !Ref MyVpc

        MyEc2JumpBox:
                Type: "AWS::EC2::Instance"
                Properties:
                        ImageId: "ami-0ecc74eca1d66d8a6"
                        InstanceType: "t2.micro"
                        KeyName: "privKey"
                        SecurityGroupIds:
                                - !GetAtt PrivSecGrp.GroupId
                        SubnetId: !Ref PublicSubnet1


        PrivateSubnet1:
                Type: AWS::EC2::Subnet
                Properties:
                        VpcId: !Ref MyVpc
                        AvailabilityZone: !Select [ 0, !GetAZs '' ]
                        CidrBlock: 10.0.1.0/24
                        MapPublicIpOnLaunch: false
                        Tags:
                                - Key: Name
                                  Value: !Sub ${EnvironmentName} Private Subnet-1 (AZ1)

        PrivateSubnet2:
                Type: AWS::EC2::Subnet
                Properties:
                        VpcId: !Ref MyVpc
                        AvailabilityZone: !Select [ 1, !GetAZs '' ]
                        CidrBlock: 10.0.2.0/24
                        MapPublicIpOnLaunch: false
                        Tags:
                                - Key: Name
                                  Value: !Sub ${EnvironmentName} Private Subnet-2 (AZ2)

        NatGatewayEIP:
                Type: AWS::EC2::EIP
                DependsOn: InternetGatewayAttachment
                Properties:
                        Domain: vpc

        NatGatewayEIP2:
                Type: AWS::EC2::EIP
                DependsOn: InternetGatewayAttachment
                Properties:
                        Domain: vpc

        NatGateway1: 
                Type: AWS::EC2::NatGateway
                Properties: 
                        AllocationId: !GetAtt NatGatewayEIP.AllocationId
                        SubnetId: !Ref PublicSubnet1

        NatGateway2: 
                Type: AWS::EC2::NatGateway
                Properties:
                        AllocationId: !GetAtt NatGatewayEIP2.AllocationId
                        SubnetId: !Ref PublicSubnet2

        PublicSubnet1:
                Type: AWS::EC2::Subnet
                Properties:
                        VpcId: !Ref MyVpc
                        AvailabilityZone: !Select [ 0, !GetAZs '' ]
                        CidrBlock: 10.0.5.0/24
                        MapPublicIpOnLaunch: true
                        Tags:
                                - Key: Name
                                  Value: !Sub ${EnvironmentName} Public Subnet-1 (AZ1)

        PublicSubnet2:
                Type: AWS::EC2::Subnet
                Properties:
                        VpcId: !Ref MyVpc
                        AvailabilityZone: !Select [ 1, !GetAZs '' ]
                        CidrBlock: 10.0.6.0/24
                        MapPublicIpOnLaunch: true
                        Tags:
                                - Key: Name
                                  Value: !Sub ${EnvironmentName} Public Subnet-2 (AZ2)

        PublicRouteTable:
                Type: AWS::EC2::RouteTable
                Properties: 
                        VpcId: !Ref MyVpc
                        Tags: 
                                - Key: Name 
                                  Value: !Sub ${EnvironmentName} Public RouteTable

        PrivateRouteTable1:
                Type: AWS::EC2::RouteTable
                Properties: 
                        VpcId: !Ref MyVpc
                        Tags: 
                                - Key: Name 
                                  Value: !Sub ${EnvironmentName} Private RouteTable1

        PrivateRouteTable2:
                Type: AWS::EC2::RouteTable
                Properties: 
                        VpcId: !Ref MyVpc
                        Tags: 
                                - Key: Name 
                                  Value: !Sub ${EnvironmentName} Private RouteTable2

        DefaultPublicRoute: 
                Type: AWS::EC2::Route
                DependsOn: InternetGatewayAttachment
                Properties: 
                        RouteTableId: !Ref PublicRouteTable
                        DestinationCidrBlock: 0.0.0.0/0
                        GatewayId: !Ref InternetGateway

        PublicSubnet1RouteTableAssociation:
                Type: AWS::EC2::SubnetRouteTableAssociation
                Properties:
                        RouteTableId: !Ref PublicRouteTable
                        SubnetId: !Ref PublicSubnet1

        PublicSubnet2RouteTableAssociation:
                Type: AWS::EC2::SubnetRouteTableAssociation
                Properties:
                        RouteTableId: !Ref PublicRouteTable
                        SubnetId: !Ref PublicSubnet2

        PrivateRoute1: 
                Type: AWS::EC2::Route
                DependsOn: InternetGatewayAttachment
                Properties: 
                        RouteTableId: !Ref PrivateRouteTable1
                        DestinationCidrBlock: 0.0.0.0/0
                        NatGatewayId: !Ref NatGateway1

        PrivateRoute2: 
                Type: AWS::EC2::Route
                DependsOn: InternetGatewayAttachment
                Properties: 
                        RouteTableId: !Ref PrivateRouteTable2
                        DestinationCidrBlock: 0.0.0.0/0
                        NatGatewayId: !Ref NatGateway2

        PrivateSubnet1RouteTableAssociation:
                Type: AWS::EC2::SubnetRouteTableAssociation
                Properties:
                        RouteTableId: !Ref PrivateRouteTable1
                        SubnetId: !Ref PrivateSubnet1

        PrivateSubnet2RouteTableAssociation:
                Type: AWS::EC2::SubnetRouteTableAssociation
                Properties:
                        RouteTableId: !Ref PrivateRouteTable2
                        SubnetId: !Ref PrivateSubnet2

        LaunchConfig:
                Type: AWS::AutoScaling::LaunchConfiguration
                Properties:
                        UserData:
                                Fn::Base64: !Sub |
                                        #!/bin/bash
                                        apt-get update -y
                                        apt-get install apache2 -y
                                        systemctl start apache2.service
                                        cd /var/www/html
                                        echo "Udacity Demo Web Server Up and Running!" > index.html
                        ImageId: !Ref ImageId
                        SecurityGroups:
                                - !Ref PrivSecGrp
                        InstanceType: !Ref InstanceType
                        BlockDeviceMappings:
                                - DeviceName: "/dev/sdk"
                                  Ebs:
                                          VolumeSize: !Ref StorageSize

        PrivSecGrp:
                Type: AWS::EC2::SecurityGroup
                Properties:
                        GroupDescription: Allow http to servers
                        VpcId: !Ref MyVpc
                        SecurityGroupIngress:
                                - IpProtocol: tcp
                                  FromPort: 80
                                  ToPort: 80
                                  CidrIp: 0.0.0.0/0
                        SecurityGroupEgress:
                                - IpProtocol: tcp
                                  FromPort: 1
                                  ToPort: 65535
                                  CidrIp: 0.0.0.0/0

        AutoScalingGroup:
                Type: AWS::AutoScaling::AutoScalingGroup
                Properties:
                        VPCZoneIdentifier:
                                - !Ref PrivateSubnet1
                                - !Ref PrivateSubnet2
                        LaunchConfigurationName: !Ref LaunchConfig
                        MinSize: '4'
                        MaxSize: '6'
                        TargetGroupARNs:
                                - !Ref TargetGroup

        LoadBalancer:
                Type: AWS::ElasticLoadBalancingV2::LoadBalancer
                Properties:
                        Subnets:
                                - !Ref PublicSubnet1
                                - !Ref PublicSubnet2
                        SecurityGroups:
                                - !Ref PrivSecGrp
                DependsOn: InternetGatewayAttachment

        Listener:
                Type: AWS::ElasticLoadBalancingV2::Listener
                Properties:
                        DefaultActions:
                                - Type: forward
                                  TargetGroupArn: !Ref TargetGroup
                        LoadBalancerArn: !Ref LoadBalancer
                        Port: '80'
                        Protocol: HTTP

        LoadBalancerListenerRule:
                Type: AWS::ElasticLoadBalancingV2::ListenerRule
                Properties:
                        Actions:
                                - Type: forward
                                  TargetGroupArn: !Ref TargetGroup
                        Conditions:
                                - Field: path-pattern
                                  Values: [/]
                        ListenerArn: !Ref Listener
                        Priority: 1

        TargetGroup:
                Type: AWS::ElasticLoadBalancingV2::TargetGroup
                Properties:
                        HealthCheckIntervalSeconds: 20
                        HealthCheckPath: /
                        HealthCheckProtocol: HTTP
                        HealthCheckTimeoutSeconds: 8
                        HealthyThresholdCount: 2
                        Port: 80
                        Protocol: HTTP
                        UnhealthyThresholdCount: 5
                        VpcId: !Ref MyVpc

Outputs:
        Loadbalancer:
                Description: Loadbalancer url
                Value:
                        Fn::Join: [ "://", [ "http", !GetAtt LoadBalancer.DNSName  ] ]
                Export:
                        Name: !Sub ${EnvironmentName}-LBUrl
